/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alluxio.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-08")
public class LockBlockTOptions implements org.apache.thrift.TBase<LockBlockTOptions, LockBlockTOptions._Fields>, java.io.Serializable, Cloneable, Comparable<LockBlockTOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LockBlockTOptions");

  private static final org.apache.thrift.protocol.TField UFS_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("ufsPath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSize", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_UFS_READ_CONCURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxUfsReadConcurrency", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mountId", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LockBlockTOptionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LockBlockTOptionsTupleSchemeFactory();

  public java.lang.String ufsPath; // required
  public long offset; // required
  public long blockSize; // required
  public int maxUfsReadConcurrency; // required
  public long mountId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UFS_PATH((short)1, "ufsPath"),
    OFFSET((short)2, "offset"),
    BLOCK_SIZE((short)3, "blockSize"),
    MAX_UFS_READ_CONCURRENCY((short)4, "maxUfsReadConcurrency"),
    MOUNT_ID((short)5, "mountId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UFS_PATH
          return UFS_PATH;
        case 2: // OFFSET
          return OFFSET;
        case 3: // BLOCK_SIZE
          return BLOCK_SIZE;
        case 4: // MAX_UFS_READ_CONCURRENCY
          return MAX_UFS_READ_CONCURRENCY;
        case 5: // MOUNT_ID
          return MOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __BLOCKSIZE_ISSET_ID = 1;
  private static final int __MAXUFSREADCONCURRENCY_ISSET_ID = 2;
  private static final int __MOUNTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UFS_PATH, new org.apache.thrift.meta_data.FieldMetaData("ufsPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blockSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_UFS_READ_CONCURRENCY, new org.apache.thrift.meta_data.FieldMetaData("maxUfsReadConcurrency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("mountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LockBlockTOptions.class, metaDataMap);
  }

  public LockBlockTOptions() {
  }

  public LockBlockTOptions(
    java.lang.String ufsPath,
    long offset,
    long blockSize,
    int maxUfsReadConcurrency,
    long mountId)
  {
    this();
    this.ufsPath = ufsPath;
    this.offset = offset;
    setOffsetIsSet(true);
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
    this.maxUfsReadConcurrency = maxUfsReadConcurrency;
    setMaxUfsReadConcurrencyIsSet(true);
    this.mountId = mountId;
    setMountIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LockBlockTOptions(LockBlockTOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUfsPath()) {
      this.ufsPath = other.ufsPath;
    }
    this.offset = other.offset;
    this.blockSize = other.blockSize;
    this.maxUfsReadConcurrency = other.maxUfsReadConcurrency;
    this.mountId = other.mountId;
  }

  public LockBlockTOptions deepCopy() {
    return new LockBlockTOptions(this);
  }

  @Override
  public void clear() {
    this.ufsPath = null;
    setOffsetIsSet(false);
    this.offset = 0;
    setBlockSizeIsSet(false);
    this.blockSize = 0;
    setMaxUfsReadConcurrencyIsSet(false);
    this.maxUfsReadConcurrency = 0;
    setMountIdIsSet(false);
    this.mountId = 0;
  }

  public java.lang.String getUfsPath() {
    return this.ufsPath;
  }

  public LockBlockTOptions setUfsPath(java.lang.String ufsPath) {
    this.ufsPath = ufsPath;
    return this;
  }

  public void unsetUfsPath() {
    this.ufsPath = null;
  }

  /** Returns true if field ufsPath is set (has been assigned a value) and false otherwise */
  public boolean isSetUfsPath() {
    return this.ufsPath != null;
  }

  public void setUfsPathIsSet(boolean value) {
    if (!value) {
      this.ufsPath = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }

  public LockBlockTOptions setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public long getBlockSize() {
    return this.blockSize;
  }

  public LockBlockTOptions setBlockSize(long blockSize) {
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
    return this;
  }

  public void unsetBlockSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  /** Returns true if field blockSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  public void setBlockSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID, value);
  }

  public int getMaxUfsReadConcurrency() {
    return this.maxUfsReadConcurrency;
  }

  public LockBlockTOptions setMaxUfsReadConcurrency(int maxUfsReadConcurrency) {
    this.maxUfsReadConcurrency = maxUfsReadConcurrency;
    setMaxUfsReadConcurrencyIsSet(true);
    return this;
  }

  public void unsetMaxUfsReadConcurrency() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXUFSREADCONCURRENCY_ISSET_ID);
  }

  /** Returns true if field maxUfsReadConcurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxUfsReadConcurrency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXUFSREADCONCURRENCY_ISSET_ID);
  }

  public void setMaxUfsReadConcurrencyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXUFSREADCONCURRENCY_ISSET_ID, value);
  }

  public long getMountId() {
    return this.mountId;
  }

  public LockBlockTOptions setMountId(long mountId) {
    this.mountId = mountId;
    setMountIdIsSet(true);
    return this;
  }

  public void unsetMountId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MOUNTID_ISSET_ID);
  }

  /** Returns true if field mountId is set (has been assigned a value) and false otherwise */
  public boolean isSetMountId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MOUNTID_ISSET_ID);
  }

  public void setMountIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UFS_PATH:
      if (value == null) {
        unsetUfsPath();
      } else {
        setUfsPath((java.lang.String)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case BLOCK_SIZE:
      if (value == null) {
        unsetBlockSize();
      } else {
        setBlockSize((java.lang.Long)value);
      }
      break;

    case MAX_UFS_READ_CONCURRENCY:
      if (value == null) {
        unsetMaxUfsReadConcurrency();
      } else {
        setMaxUfsReadConcurrency((java.lang.Integer)value);
      }
      break;

    case MOUNT_ID:
      if (value == null) {
        unsetMountId();
      } else {
        setMountId((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UFS_PATH:
      return getUfsPath();

    case OFFSET:
      return getOffset();

    case BLOCK_SIZE:
      return getBlockSize();

    case MAX_UFS_READ_CONCURRENCY:
      return getMaxUfsReadConcurrency();

    case MOUNT_ID:
      return getMountId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UFS_PATH:
      return isSetUfsPath();
    case OFFSET:
      return isSetOffset();
    case BLOCK_SIZE:
      return isSetBlockSize();
    case MAX_UFS_READ_CONCURRENCY:
      return isSetMaxUfsReadConcurrency();
    case MOUNT_ID:
      return isSetMountId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LockBlockTOptions)
      return this.equals((LockBlockTOptions)that);
    return false;
  }

  public boolean equals(LockBlockTOptions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ufsPath = true && this.isSetUfsPath();
    boolean that_present_ufsPath = true && that.isSetUfsPath();
    if (this_present_ufsPath || that_present_ufsPath) {
      if (!(this_present_ufsPath && that_present_ufsPath))
        return false;
      if (!this.ufsPath.equals(that.ufsPath))
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_blockSize = true;
    boolean that_present_blockSize = true;
    if (this_present_blockSize || that_present_blockSize) {
      if (!(this_present_blockSize && that_present_blockSize))
        return false;
      if (this.blockSize != that.blockSize)
        return false;
    }

    boolean this_present_maxUfsReadConcurrency = true;
    boolean that_present_maxUfsReadConcurrency = true;
    if (this_present_maxUfsReadConcurrency || that_present_maxUfsReadConcurrency) {
      if (!(this_present_maxUfsReadConcurrency && that_present_maxUfsReadConcurrency))
        return false;
      if (this.maxUfsReadConcurrency != that.maxUfsReadConcurrency)
        return false;
    }

    boolean this_present_mountId = true;
    boolean that_present_mountId = true;
    if (this_present_mountId || that_present_mountId) {
      if (!(this_present_mountId && that_present_mountId))
        return false;
      if (this.mountId != that.mountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUfsPath()) ? 131071 : 524287);
    if (isSetUfsPath())
      hashCode = hashCode * 8191 + ufsPath.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(blockSize);

    hashCode = hashCode * 8191 + maxUfsReadConcurrency;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mountId);

    return hashCode;
  }

  @Override
  public int compareTo(LockBlockTOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUfsPath()).compareTo(other.isSetUfsPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUfsPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ufsPath, other.ufsPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlockSize()).compareTo(other.isSetBlockSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSize, other.blockSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxUfsReadConcurrency()).compareTo(other.isSetMaxUfsReadConcurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxUfsReadConcurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxUfsReadConcurrency, other.maxUfsReadConcurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMountId()).compareTo(other.isSetMountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mountId, other.mountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LockBlockTOptions(");
    boolean first = true;

    sb.append("ufsPath:");
    if (this.ufsPath == null) {
      sb.append("null");
    } else {
      sb.append(this.ufsPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockSize:");
    sb.append(this.blockSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxUfsReadConcurrency:");
    sb.append(this.maxUfsReadConcurrency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mountId:");
    sb.append(this.mountId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LockBlockTOptionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LockBlockTOptionsStandardScheme getScheme() {
      return new LockBlockTOptionsStandardScheme();
    }
  }

  private static class LockBlockTOptionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LockBlockTOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LockBlockTOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UFS_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ufsPath = iprot.readString();
              struct.setUfsPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockSize = iprot.readI64();
              struct.setBlockSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_UFS_READ_CONCURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxUfsReadConcurrency = iprot.readI32();
              struct.setMaxUfsReadConcurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mountId = iprot.readI64();
              struct.setMountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LockBlockTOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ufsPath != null) {
        oprot.writeFieldBegin(UFS_PATH_FIELD_DESC);
        oprot.writeString(struct.ufsPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI64(struct.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
      oprot.writeI64(struct.blockSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_UFS_READ_CONCURRENCY_FIELD_DESC);
      oprot.writeI32(struct.maxUfsReadConcurrency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOUNT_ID_FIELD_DESC);
      oprot.writeI64(struct.mountId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LockBlockTOptionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LockBlockTOptionsTupleScheme getScheme() {
      return new LockBlockTOptionsTupleScheme();
    }
  }

  private static class LockBlockTOptionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LockBlockTOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LockBlockTOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUfsPath()) {
        optionals.set(0);
      }
      if (struct.isSetOffset()) {
        optionals.set(1);
      }
      if (struct.isSetBlockSize()) {
        optionals.set(2);
      }
      if (struct.isSetMaxUfsReadConcurrency()) {
        optionals.set(3);
      }
      if (struct.isSetMountId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUfsPath()) {
        oprot.writeString(struct.ufsPath);
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetBlockSize()) {
        oprot.writeI64(struct.blockSize);
      }
      if (struct.isSetMaxUfsReadConcurrency()) {
        oprot.writeI32(struct.maxUfsReadConcurrency);
      }
      if (struct.isSetMountId()) {
        oprot.writeI64(struct.mountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LockBlockTOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ufsPath = iprot.readString();
        struct.setUfsPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.blockSize = iprot.readI64();
        struct.setBlockSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxUfsReadConcurrency = iprot.readI32();
        struct.setMaxUfsReadConcurrencyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mountId = iprot.readI64();
        struct.setMountIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

